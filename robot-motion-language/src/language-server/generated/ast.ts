/******************************************************************************
 * This file was generated by langium-cli 0.5.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable @typescript-eslint/array-type */
/* eslint-disable @typescript-eslint/no-empty-interface */
import { AstNode, AstReflection, ReferenceInfo, isAstNode, TypeMetaData } from 'langium';

export interface Def extends AstNode {
    readonly $container: Model;
    name: string
    stmts: Array<Move | MultiMove | Repeat>
}

export const Def = 'Def';

export function isDef(item: unknown): item is Def {
    return reflection.isInstance(item, Def);
}

export interface Model extends AstNode {
    def: Def
}

export const Model = 'Model';

export function isModel(item: unknown): item is Model {
    return reflection.isInstance(item, Model);
}

export interface Move extends AstNode {
    readonly $container: Def | MultiMove | Repeat;
    joint: string
    position: number
    rotation?: string
    side?: string
}

export const Move = 'Move';

export function isMove(item: unknown): item is Move {
    return reflection.isInstance(item, Move);
}

export interface MultiMove extends AstNode {
    readonly $container: Def | Repeat;
    compositeMoves: Array<Move>
}

export const MultiMove = 'MultiMove';

export function isMultiMove(item: unknown): item is MultiMove {
    return reflection.isInstance(item, MultiMove);
}

export interface Repeat extends AstNode {
    readonly $container: Def;
    amount: number
    stmtsToRepeat: Array<Move | MultiMove>
}

export const Repeat = 'Repeat';

export function isRepeat(item: unknown): item is Repeat {
    return reflection.isInstance(item, Repeat);
}

export type RobotMotionLanguageAstType = 'Def' | 'Model' | 'Move' | 'MultiMove' | 'Repeat';

export class RobotMotionLanguageAstReflection implements AstReflection {

    getAllTypes(): string[] {
        return ['Def', 'Model', 'Move', 'MultiMove', 'Repeat'];
    }

    isInstance(node: unknown, type: string): boolean {
        return isAstNode(node) && this.isSubtype(node.$type, type);
    }

    isSubtype(subtype: string, supertype: string): boolean {
        if (subtype === supertype) {
            return true;
        }
        switch (subtype) {
            default: {
                return false;
            }
        }
    }

    getReferenceType(refInfo: ReferenceInfo): string {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }

    getTypeMetaData(type: string): TypeMetaData {
        switch (type) {
            case 'Def': {
                return {
                    name: 'Def',
                    mandatory: [
                        { name: 'stmts', type: 'array' }
                    ]
                };
            }
            case 'MultiMove': {
                return {
                    name: 'MultiMove',
                    mandatory: [
                        { name: 'compositeMoves', type: 'array' }
                    ]
                };
            }
            case 'Repeat': {
                return {
                    name: 'Repeat',
                    mandatory: [
                        { name: 'stmtsToRepeat', type: 'array' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    mandatory: []
                };
            }
        }
    }
}

export const reflection = new RobotMotionLanguageAstReflection();
